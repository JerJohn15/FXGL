{"name":"FXGL","tagline":"JavaFX 8 Game Library","body":"## FXGL\r\nSimple and easy to use JavaFX 8 game library<br/>\r\n[![Release](https://img.shields.io/github/release/AlmasB/FXGL.svg?label=maven)](https://jitpack.io/#AlmasB/FXGL)\r\n[![MIT License](http://img.shields.io/badge/license-MIT-green.svg) ](https://github.com/AlmasB/FXGL/blob/master/LICENSE)\r\n\r\n## Use Case\r\nFXGL is perfect for small to medium sized games and for beginner / intermediate programmers in JavaFX.\r\nIt is primarily aimed at people who wish to learn and practise game development.\r\nIt also takes care of the common boilerplate code, so it can be used for fast prototyping.\r\nFor larger projects the library may not be as suitable, whereas advanced programmers will probably want to work\r\nwith JavaFX directly.\r\nIf you have a use case (feature) that FXGL doesn't cover, drop me an email stating the use case and what you have already tried.\r\n\r\n## Prerequisites\r\nOracle JDK 1.8.0_40+\r\n\r\n## Build\r\n```bash\r\nmvn package\r\n```\r\nThis will generate FXGL-0.1.7.jar, sources and javadoc.\r\n\r\n## Setup\r\nDepending on what IDE or build tool you are using choose appropriate setup steps.\r\n\r\n## Setup (Maven)\r\n```maven\r\n<repository>\r\n    <id>jitpack.io</id>\r\n    <url>https://jitpack.io</url>\r\n</repository>\r\n\r\n<dependency>\r\n    <groupId>com.github.AlmasB</groupId>\r\n    <artifactId>FXGL</artifactId>\r\n    <version>0.1.7</version>\r\n</dependency>\r\n```\r\n\r\n## Setup (Gradle)\r\n```gradle\r\nrepositories {\r\n    // ...\r\n    maven { url \"https://jitpack.io\" }\r\n}\r\n\r\ndependencies {\r\n    compile 'com.github.AlmasB:FXGL:0.1.7'\r\n}\r\n```\r\n\r\n## Setup (General)\r\nDownload FXGL-0.1.7.jar from <a href=\"https://github.com/AlmasB/FXGL/releases\">Releases</a> (or the one built yourself) and add it to the build path\r\nin your IDE. That's it, you're all set! See below setup for some IDEs\r\n\r\n## Setup (NetBeans, tested with 8.0.2)\r\n1. File -> New Project -> Java -> Java Application -> Next\r\n2. Choose Project Name (optional: create main class) -> Finish\r\n3. In the Projects view, right-click Libraries -> Add Jar/Folder -> Navigate and Select downloaded FXGL jar\r\n\r\n## Setup (Eclipse, tested with 4.5)\r\n1. File -> New Java Project\r\n2. Choose Project Name -> Finish\r\n3. Right-click on the created project -> Build Path -> Configure Build Path -> \r\n    Libraries Tab -> Add External JAR -> Navigate and Select downloaded FXGL jar\r\n    \r\n## Setup (IntelliJ IDEA, tested with 14.1)\r\n1. Create Project\r\n2. File -> Project Structure\r\n3. Libraries -> Add Java -> Navigate and Select downloaded FXGL jar\r\n    \r\n## Directory Structure for FXGL Applications\r\nThis matches the Eclipse/NetBeans structure but should work with other IDEs.\r\nThis allows easy packaging and deployment, as all assets packaged into jar will continue loading with\r\nexactly the same code.\r\n\r\nproject directory (typically project name)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;src (source code directory)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assets<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textures (image files \".png\", \".jpg\")<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio (audio files \".wav\")<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;music (music files \".mp3\")<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text (text files \".txt\")<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data (binary data files with custom extensions)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui/css (stylesheets for customizing UI elements)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui/fonts (fonts \".ttf\", \".otf\")<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(your packages / code)\r\n\r\n## Basic Usage / Examples\r\nThe samples/ folder will be constantly updated to include demonstrations of various features.\r\nVideo Tutorials Playlist - <a href=\"https://www.youtube.com/watch?v=mPE8p8p_YjQ&list=PL4h6ypqTi3RTiTuAQFKE6xwflnPKyFuPp\">YouTube Link</a> <br/>\r\nThe videos will walk you through the basics.\r\n\r\n## Notes\r\nFXGL is in early stages of development. Hence, the API and functionality are likely to change from version to version.\r\nSo I wouldn't recommend building a full scale application if you want to be able to use latest versions of FXGL.\r\nThe plan is to make the API robust, stable and intuitive by v 0.5.\r\nIf certain parts of documentation are ambiguous or incorrect/missing please let me know.\r\nAny testing, feedback and bug reports are welcome <br/>\r\n\r\n3D features and port to mobile will be considered in the future. <br/>\r\n\r\nThis is only a hobby / side project (for the time being anyway), so the development progress may vary.\r\nMost of the code follows \"some\" design principles and practices, but overall I wouldn't consider the code to be high quality\r\nand as it is now it doesn't have much production value.\r\n\r\n## Changelog\r\nFXGL 0.1.7 (latest) supports:\r\n* Full JavaFX Integration (FXGL is built on top of JavaFX 8)\r\n* JBox2D Physics Engine Integration (v.2.2.1.1, https://github.com/jbox2d/jbox2d)\r\n* Basic Game Loop\r\n* Basic Logging\r\n* Basic Performance Monitor\r\n* Basic Audio System\r\n* Basic Particle System with Canvas Rendering\r\n* Multi-Layer Rendering\r\n* Dynamic Texture Manipulation (Texture Processing + Sprite Sheet Animations)\r\n* Entity Component/Control System\r\n* Time Management System\r\n* Global and Scoped Event System\r\n* Input Bindings (Keys + Mouse)\r\n* Automated Asset Management (\".png\", \".jpg\", \".wav\", \".mp3\", \".txt\", \".ttf/.otf\" custom binary formats)\r\n* Automated Collision Handling (also unified, physics collisions are hooked into FXGL)\r\n* Automated Target Screen Resolution (+Fullscreen)\r\n* Networking (both TCP and UDP)\r\n* AI Pathfinding (A star search)\r\n* Quick Time Events (QTE) (<b>API INCOMPLETE</b>)\r\n* Intro Video / Animation (also supports custom intro)\r\n* Main Menu + Game Menu (also supports custom Main Menu and Game Menu)\r\n* Custom Modifiable UI elements (Dialogs, Bars, Buttons, etc)\r\n* Saving / Loading System\r\n* Other minor game dev features\r\n\r\n## Next Release Features\r\nThe issue tracker contains information about possible features to be added in\r\nthe next release.\r\n            \r\n## Few Simple Projects So Far<br/>\r\n<img src=\"http://almasb.github.io/LearnJavaGameDev/tutorials/images/fxgl/FXGL_Menu.jpg\" />\r\n<img src=\"http://almasb.github.io/LearnJavaGameDev/tutorials/images/fxgl/FXGL_Pacman.png\" />\r\n<img src=\"http://almasb.github.io/LearnJavaGameDev/tutorials/images/fxgl/FXGL_Physics.jpg\" />\r\n<img src=\"http://almasb.github.io/LearnJavaGameDev/tutorials/images/fxgl/FXGL_Platformer.jpg\" />\r\n<img src=\"http://almasb.github.io/LearnJavaGameDev/tutorials/images/fxgl/FXGL_RPG.png\" />\r\n<img src=\"http://almasb.github.io/LearnJavaGameDev/tutorials/images/fxgl/FXGL24_FXWars2.jpg\" />\r\nSprites can be found on http://opengameart.org/\r\n            \r\n## License\r\nMIT, so you can do anything you want with the code.\r\n\r\n## Contact\r\nalmaslvl@gmail.com, https://plus.google.com/+AlmasB0/about<br/>\r\nMake sure to put \"FXGL\" as the email subject for faster response.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}